#define LIGHT_THRESHOLD 48
#define SPEED 50
#define turn(direction) RotateMotor(OUT_C, 22, direction);
#define DISTANCE_THRESHOLD 30
#define CIRCUMFERENCE 5.6*PI
#define CAR_LENGTH 17.5
#define VOL 4

bool inLine = false;  //back wheels in line with end of spot
int parkingSpotLength = 0;
int distancePastParkingSpot = 0;
int initialDistance;
int endDistance;
int endDistance2;

sub measureDistanceOfParkingSpot() {
  initialDistance = MotorRotationCount(OUT_B)*-1/360*CIRCUMFERENCE;
  Wait(1000);
  until (SensorUS(IN_1) <= DISTANCE_THRESHOLD);
  endDistance = MotorRotationCount(OUT_B)*-1/360*CIRCUMFERENCE;
  endDistance2 = MotorRotationCount(OUT_B)*-1;
  PlayToneEx(262,400,VOL,FALSE);
  parkingSpotLength = endDistance - initialDistance;
}

sub checkIfInLine() {
  PlayToneEx(330,1000,4,FALSE);
  //until (MotorRotationCount(OUT_B)*-1/360*CIRCUMFERENCE >= endDistance + CAR_LENGTH);
  until (MotorRotationCount(OUT_B)*-1 >= endDistance2 + (CAR_LENGTH/CIRCUMFERENCE)*360);
  inLine = true;
  /*
  PlayToneEx(262,400,VOL,FALSE); Wait(500);
  PlayToneEx(294,400,VOL,FALSE); Wait(500);
  PlayToneEx(330,400,VOL,FALSE); Wait(500);
  PlayToneEx(294,400,VOL,FALSE); Wait(500);
  PlayToneEx(262,1600,VOL,FALSE); Wait(2000);  */
}

task endBeep() {
  repeat(15) {
    PlayToneEx(330,500,4,FALSE);
    Wait(1000);
  }
}

task endDisplay() {
  NumOut(5, LCD_LINE2, parkingSpotLength);
  Wait(15000);
}

task senseDistance() {
  // set found to true when it sees an open spot
  until (SensorUS(IN_1) > DISTANCE_THRESHOLD);
  //PlayToneEx(330,1000,4,FALSE);
  measureDistanceOfParkingSpot();
  checkIfInLine();
}

task driveAndDetect() {
  //while back wheels are not inline
  while (inLine == false) {
    OnRev(OUT_B, SPEED);
    //checkIfInLine();
  }

  Off(OUT_B);
  RotateMotor(OUT_A, 50, 90);
  Precedes(endBeep, endDisplay);
}

task steer() {
  while (inLine == false) {
    if (Sensor(IN_2) > LIGHT_THRESHOLD) { // if white
      turn(30);
      until(Sensor(IN_2) < LIGHT_THRESHOLD); // until black
      turn(-30);
    }
  }
}

task main() {
  SetSensorLight(IN_2);
  SetSensorLowspeed(IN_1);

  RotateMotor(OUT_A, 50, -90);
  RotateMotor(OUT_C, 22, -5);
  Precedes(driveAndDetect, steer, senseDistance);
}

//INCREASED STEERING TO 30 FROM 25
